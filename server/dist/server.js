!function(e){var t={};function a(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/",a(a.s=6)}([function(e,t){e.exports=require("node-fetch")},function(e,t){e.exports=require("pg")},function(e,t){e.exports=require("babel-polyfill")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("path")},function(e,t,a){"use strict";a.r(t);var n=a(3),r=a.n(n),o=a(4),s=a.n(o),i=(a(2),a(1));var g={PG_DB_URL:"mserverdev.cskmchbf1fd8.ap-southeast-1.rds.amazonaws.com",DB_USER:"melonade",DB_PASS:"appiansucks",DB_PORT:5432,DB_DEFAULT_DATABASE:"pt",PT_DEV_API_TOKEN:"7fd6b9475e68a6f74c2e4f376153959f",PT_API_TOKEN:"ec4c4203fae4b60860c466846e60c4bd",PT_BASE_URL:"https://www.pivotaltracker.com/services/v5"};var c={CONFIGURATION_TABLE:"PT_CONFIGURATION",HISTORY_TABLE:"PT_HISTORY",PT_VIEW:"PT_VIEW"};const l=new i.Pool({host:g.PG_DB_URL,port:g.DB_PORT,database:g.DB_DEFAULT_DATABASE,user:g.DB_USER,password:g.DB_PASS});l.on("connect",()=>{console.log(`Successfully connected to ${g.PG_DB_URL}, databse: ${g.DB_DEFAULT_DATABASE}`)});var d={async getLatestSprintInfo(e){const t=`SELECT * FROM ${c.HISTORY_TABLE} WHERE project_id = '${e}' ORDER BY sprint_no DESC;`;return{status:1,text:"Data retrieved!",data:(await l.query(t)).rows[0]}},async getHistory(e,t){const a=`SELECT * FROM ${c.HISTORY_TABLE} WHERE sprint_no = '${t}' AND project_id = '${e}';`;return{status:1,text:"Data retrieved!",data:(await l.query(a)).rows[0]}},async updateHistory(e){const t=`INSERT INTO public."${c.HISTORY_TABLE}"(sprint_no, project_id, sprint_start_date, release_date, review_date)\n                            VALUES('${e.sprintNo}', '${e.projectId}', '${e.sprintStartDate}', '${e.releaseDate}', '${e.reviewDate}')`;await l.query(t);return{status:1,text:"History Updated!",data:null}},async saveHistory(e){const t=`UPDATE ${c.HISTORY_TABLE} SET release_date = '${e.releaseDate}', review_date = '${e.reviewDate}' \n                            WHERE sprint_no = '${e.sprintNo}' AND project_id = '${e.projectId}'; `;console.log(t);await l.query(t);return{status:1,text:"Dates updated!",data:null}},async updateConfiguration(e){const t=`INSERT INTO ${c.CONFIGURATION_TABLE}(project_id, release_tagging, review_tagging, feature_tagging, chore_tagging, bugfix_tagging)\n                            VALUES('${e.projectId}', '${e.isReleaseTaggingEnabled}', '${e.isReviewTaggingEnabled}',\n                                                                '${e.isFeatureTaggingEnabled}', '${e.isChoreTaggingEnabled}', '${e.isBugfixTaggingEnabled}')\n                            ON CONFLICT (project_id) DO UPDATE\n                            SET (release_tagging, review_tagging, feature_tagging, chore_tagging, bugfix_tagging) = ('${e.isReleaseTaggingEnabled}', '${e.isReviewTaggingEnabled}',\n                            '${e.isFeatureTaggingEnabled}', '${e.isChoreTaggingEnabled}', '${e.isBugfixTaggingEnabled}');`;await l.query(t);return{status:1,text:"Configuration Saved!",data:null}},async getConfiguration(e){const t=`SELECT project_id, release_tagging, review_tagging, feature_tagging, chore_tagging, bugfix_tagging FROM\n                        ${c.CONFIGURATION_TABLE} WHERE project_id = '${e}'`;return{status:1,text:null,data:(await l.query(t)).rows[0]}},async getConfigurations(e){const t=`SELECT * FROM ${c.PT_VIEW} WHERE project_id = '${e}' ORDER BY sprint_no DESC;`;return{status:1,text:null,data:(await l.query(t)).rows[0]}}};var u={async getConfiguration(e,t){const a=e.params.projectId,n=await d.getConfiguration(a);t.send(n)},async saveConfiguration(e,t){const a=e.body;console.log(a);const n=await d.updateConfiguration(a);await d.saveHistory(a);t.send(n)}},p=a(0),_=a.n(p);var T=class{constructor(){this.apiKey=g.PT_DEV_API_TOKEN}async getResponseData(e,t){return _()(e,{method:t,headers:{"X-TrackerToken":this.apiKey}}).then(e=>e.json()).then(e=>e)}};var f=class{constructor(){this.requestUtil=new T}async getLabelsByProject(e){let t=g.PT_BASE_URL;return t+=`/projects/${e}`,t+="/labels",this.requestUtil.getResponseData(t,"get")}async getLabelByName(e,t){return t.filter(t=>t.name==e)}};const y={async updateStory(e,t,a){y.tagReleaseLabel(e,t,a)},async getStoryById(e,t){let a=g.PT_BASE_URL;return a+="/projects/",a+=t,a+="/stories/",a+=e,console.log(a),console.log(g.PT_DEV_API_TOKEN),await _()(a,{method:"get",headers:{"X-TrackerToken":g.PT_DEV_API_TOKEN,"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},getLabels:e=>e.labels,doesReleaseLabelExist(e){let t=!1;return e.forEach(e=>{e.name.includes("release")&&(t=!0)}),t},tagReleaseLabel(e,t,a){let n=g.PT_BASE_URL;n+="/projects/",n+=t,n+="/stories/",n+=e,n+="/labels",console.log(n);let r={name:y.formatDate(a)};_()(n,{method:"post",body:JSON.stringify(r),headers:{"X-TrackerToken":g.PT_DEV_API_TOKEN,"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>{console.log(e)})},formatDate(e){let t=new Date(e),a=(t.getMonth()+1).toString(),n=t.getFullYear().toString(),r=t.getDate().toString();return`${n}-${a.padStart(2,0)}-${r.padStart(2,0)} release`}};var E=y;var b=class{constructor(){this.labelUtil=new f,this.getLabelsInProject=this.getLabelsInProject.bind(this),this.getLabelByName=this.getLabelByName.bind(this)}async getLatestSprint(e,t){const a=e.params.projectId;let n=await d.getLatestSprintInfo(a);t.send(n)}async getConfigurations(e,t){let a=e.params.projectId,n=await d.getConfigurations(a),r=JSON.stringify(n.data);t.send(r)}async getHistoryDate(e,t){const a=e.params.projectId,n=e.params.sprintNo;let r=await d.getHistory(a,n);t.send(r)}async onTrackerEvent(e,t){const a=e.body,n=a.primary_resources[0].id,r=a.project.id;let o=a.primary_resources[0].story_type;console.log("story type: "+o);let s=await d.getConfigurations(r);console.log("config: "+s.data);let i=!1;const g=a.highlight;switch(o){case"feature":i=s.data.feature_tagging;break;case"chore":i=s.data.chore_tagging;break;case"bug":i=s.data.bugfix_tagging}i&&"finished"==g&&(console.log("tagging"),await E.updateStory(n,r,s.data.release_date)),t.send("request received")}async getLabelsInProject(e,t){const a=e.params.projectId;let n=await this.labelUtil.getLabelsByProject(a);t.send(n)}async getLabelByName(e,t){const a=e.params.projectId,n=e.params.queryName;let r=await this.labelUtil.getLabelsByProject(a),o=await this.labelUtil.getLabelByName(n,r);t.send(o)}};const S=new i.Pool({host:g.PG_DB_URL,port:g.DB_PORT,database:g.DB_DEFAULT_DATABASE,user:g.DB_USER,password:g.DB_PASS});S.on("connect",()=>{console.log(`Successfully connected to ${g.PG_DB_URL}`)});var D=e=>{e.use(function(e,t,a){t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),a()}),e.get("/test",(e,t)=>{t.writeHead(200,{"Content-Type":"text/plain"}),t.end("Invalid Endpoint\n")}),e.get("/api/droptables",(e,t)=>{t.send("Tables dropped")}),e.get("/api/createtables",(e,t)=>{t.send("Tables created")}),e.get("/api/getsprint/project/:projectId/",(new b).getLatestSprint),e.get("/api/project/:projectId/getconfig",(new b).getConfigurations),e.get("/api/getlabels/:projectId",(new b).getLabelsInProject),e.get("/api/project/:projectId/label/:queryName",(new b).getLabelByName),e.get("/api/config/project/:projectId",u.getConfiguration),e.post("/api/updateconfig",u.saveConfiguration),e.post("/api/pt/hook",(new b).onTrackerEvent)},w=a(5),h=a.n(w);const j=r()(),A=process.env.PORT||5e3,R=h.a.join(__dirname,"build");j.use(s.a.urlencoded({extended:!1})),j.use(s.a.json()),j.use("/",r.a.static(R)),D(j),j.listen(A,()=>{console.log(`Serving static files from ${R}`),console.log(`Listening on port ${A}`)})}]);