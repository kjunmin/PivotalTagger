{"version":3,"sources":["constants.js","controllers/ConfigurationController.js","components/Selection.jsx","components/Home.jsx","components/JBHead.jsx","App.js","serviceWorker.js","index.js"],"names":["Constants","ENDPOINT_UPDATE_PATH","TOGGLE_RELEASE_TAGGING","TOGGLE_FEATURE_TAGGING","TOGGLE_CHORE_TAGGING","TOGGLE_BUGFIX_TAGGING","ConfigurationController","updateConfigurations","json","console","log","JSON","stringify","fetch","method","headers","Content-Type","body","Selection","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCheckboxToggle","toggleType","setState","isReleaseTaggingEnabled","state","isFeatureTaggingEnabled","isChoreTaggingEnabled","isBugfixTaggingEnabled","handleSaveChanges","projectId","_this2","react_default","a","createElement","Container","Row","className","Col","md","FormGroup","controlId","Form","Check","type","onClick","label","style","display","Button","React","Component","Home","JBHead","Jumbotron","App","components_JBHead","Tabs","defaultActiveKey","Tab","eventKey","title","components_Home","components_Selection","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.921f889a.chunk.js","sourcesContent":["const Constants = {\r\n    \"ENDPOINT_UPDATE_PATH\" : \"http://localhost:5000/api/updateconfig\",\r\n    \"TOGGLE_RELEASE_TAGGING\": \"TOGGLE_RELEASE_TAGGING\",\r\n    \"TOGGLE_FEATURE_TAGGING\": \"TOGGLE_FEATURE_TAGGING\",\r\n    \"TOGGLE_CHORE_TAGGING\": \"TOGGLE_CHORE_TAGGING\",\r\n    \"TOGGLE_BUGFIX_TAGGING\": \"TOGGLE_BUGFIX_TAGGING\"\r\n}\r\n\r\nexport default Constants;","import Constants from \"../constants\";\r\n\r\nconst ConfigurationController = {\r\n    updateConfigurations(json) {\r\n        console.log(Constants.ENDPOINT_UPDATE_PATH);\r\n        console.log(JSON.stringify(json));\r\n        fetch(Constants.ENDPOINT_UPDATE_PATH, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(json)\r\n        })\r\n    }\r\n}\r\n\r\nexport default ConfigurationController;","import React from 'react';\r\nimport { Button, Container, Row, Col, Form, FormControl, FormGroup } from 'react-bootstrap';\r\nimport Constants from '../constants';\r\nimport ConfigurationController from '../controllers/ConfigurationController';\r\n\r\nclass Selection extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            projectId: 1234,\r\n            isReleaseTaggingEnabled: false,\r\n            isFeatureTaggingEnabled: false,\r\n            isChoreTaggingEnabled: false,\r\n            isBugfixTaggingEnabled: false\r\n        }\r\n    }\r\n\r\n    handleCheckboxToggle = (toggleType) => {\r\n        switch(toggleType) {\r\n            case Constants.TOGGLE_RELEASE_TAGGING:\r\n                this.setState({\r\n                    isReleaseTaggingEnabled: !this.state.isReleaseTaggingEnabled\r\n                });\r\n                break;\r\n            case Constants.TOGGLE_FEATURE_TAGGING:\r\n                this.setState({\r\n                    isFeatureTaggingEnabled: !this.state.isFeatureTaggingEnabled\r\n                });\r\n                break;\r\n            case Constants.TOGGLE_CHORE_TAGGING:\r\n                this.setState({\r\n                    isChoreTaggingEnabled: !this.state.isChoreTaggingEnabled\r\n                });\r\n                break;\r\n            case Constants.TOGGLE_BUGFIX_TAGGING:\r\n                this.setState({\r\n                    isBugfixTaggingEnabled: !this.state.isBugfixTaggingEnabled\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleSaveChanges = () => {\r\n        ConfigurationController.updateConfigurations(this.state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col md=\"auto\">\r\n                        <FormGroup controlId=\"formConfiguration\">\r\n                            <Form.Check type=\"checkbox\" onClick={() => this.handleCheckboxToggle(Constants.TOGGLE_RELEASE_TAGGING)} label=\"Enable Release Tagging\" />\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"formConfiguration\" style={this.state.isReleaseTaggingEnabled ? {} : { display: 'none' }}>\r\n                            <Form.Check type=\"checkbox\" onClick={() => this.handleCheckboxToggle(Constants.TOGGLE_FEATURE_TAGGING)} label=\"Enable Feature Tagging\" />\r\n                            <Form.Check type=\"checkbox\" onClick={() => this.handleCheckboxToggle(Constants.TOGGLE_CHORE_TAGGING)} label=\"Enable Chore Tagging\" />\r\n                            <Form.Check type=\"checkbox\" onClick={() => this.handleCheckboxToggle(Constants.TOGGLE_BUGFIX_TAGGING)} label=\"Enable Bugfix Tagging\" />\r\n                        </FormGroup>\r\n                        <Button onClick={this.handleSaveChanges}>Save Changes</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Selection;","\r\nimport React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h2>Contact</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Jumbotron} from 'react-bootstrap';\r\n\r\nconst JBHead = () => (\r\n    <Jumbotron>\r\n        <h1>Pivotal</h1>\r\n        <p>\r\n            Enable automatic tagging for released/reviewed stories on Pivotal Tracker.\r\n        </p>            \r\n    </Jumbotron>\r\n)\r\n\r\nexport default JBHead;","import React from 'react';\nimport Selection from './components/Selection';\nimport { Tabs, Tab, Container } from 'react-bootstrap';\nimport Home from './components/Home';\nimport JBHead from './components/JBHead';\n\nfunction App() {\n  return (\n    <Container>\n      <JBHead></JBHead>\n      <Tabs defaultActiveKey=\"home\">\n        <Tab eventKey=\"home\" title=\"Current Sprint\">\n          <Home />\n        </Tab>\n        <Tab eventKey=\"configure\" title=\"Configure\">\n          <Selection />\n        </Tab>\n      </Tabs>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <App />, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}